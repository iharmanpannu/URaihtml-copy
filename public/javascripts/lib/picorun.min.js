function button_callback() {
    function a(j, k, l) {
        const m = new Uint8Array(k * l);
        for (let n = 0; n < k; ++n)
            for (let o = 0; o < l; ++o) m[n * l + o] = (2 * j[4 * n * l + 4 * o + 0] + 7 * j[4 * n * l + 4 * o + 1] + 1 * j[4 * n * l + 4 * o + 2]) / 10;
        return m
    }
    if (!initialized) {
        const b = pico.instantiate_detection_memory(5);
        let d = () => -1;
        fetch('https://raw.githubusercontent.com/nenadmarkus/pico/c2e81f9d23cc11d1a612fd21e4f9de0921a5d0d9/rnt/cascades/facefinder').then(j => {
            j.arrayBuffer().then(k => {
                const l = new Int8Array(k);
                d = pico.unpack_cascade(l), console.log('* cascade loaded')
            })
        });
        const f = document.querySelectorAll('canvas#video-canvas')[0].getContext('2d'),
            h = new camvas(f, j => {
                f.drawImage(j, 0, 0);
                const l = f.getImageData(0, 0, 640, 480).data;
                for (image = {
                        pixels: a(l, 480, 640),
                        nrows: 480,
                        ncols: 640,
                        ldim: 640
                    }, params = {
                        shiftfactor: 0.1,
                        minsize: 50,
                        maxsize: 1000,
                        scalefactor: 1.1
                    }, dets = pico.run_cascade(image, d, params),
                    dets = b(dets),
                    dets = pico.cluster_detections(dets, 0.2),
                    i = 0; i < dets.length; ++i)
                    90 < dets[i][3] && (f.beginPath(),
                        f.arc(dets[i][1], dets[i][0], dets[i][2] / 2, 0, 2 * Math.PI, !1),
                        f.lineWidth = 3,
                        f.strokeStyle = '#4BB76B',
                        f.stroke(),
                        faceDetected())
            });
        initialized = !0
    }
}